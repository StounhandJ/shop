<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;

class Subdomain extends Model
{
    use HasFactory;

    protected $appends = ['name','user_id'];

    protected $fillable = [
        'name',
        'user_id',
    ];

    public function user()
    {
        return $this->belongsTo(User::class)->getResults();
    }

    public static function create(string $name, User $user)
    {
        Subdomain::createSubdomainDirectory($name, $user);
        if (is_null(Subdomain::firstWhere('user_id', 1)))
        {
            $product = new Subdomain();
            $product->name = $name;
            $product->user_id = $user->id;
            $product->save();
        }

    }

    public static function createSubdomainDirectory(string $name, User $user)
    {
        Subdomain::deleteSubdomainDirectory($user);
        Storage::disk("subdomains")->makeDirectory($user->name);
        $files = Storage::disk("templates")->allFiles($name);
        foreach ($files as $file)
        {
            $array = explode('/', $file);
            $file_name = end($array);
            Storage::disk("subdomains")->put($user->name."/".$file_name, Storage::disk("templates")->readStream($file));
        }
    }

    public static function deleteSubdomainDirectory(User $user)
    {
        Storage::disk("subdomains")->deleteDirectory($user->name);
    }

    public function delete()
    {
        Subdomain::deleteSubdomainDirectory($this->user());
        return parent::delete(); // TODO: Change the autogenerated stub
    }

    public function getAllFilesPath()
    {
        return Storage::disk("subdomains")->allFiles($this->user()->name);
    }
}
